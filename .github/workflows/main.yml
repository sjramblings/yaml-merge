name: Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

# Add permissions block at the workflow level
permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Run Tests with Coverage
        run: |
          go test -v -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out
        if: always()  # Upload even if tests fail

  build:
    name: Build Binary
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Build
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          BINARY_SUFFIX=""
          if [ "${{ matrix.os }}" = "windows" ]; then
            BINARY_SUFFIX=".exe"
          fi
          make build
          mv bin/yaml-merge "yaml-merge-${{ matrix.os }}-${{ matrix.arch }}${BINARY_SUFFIX}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: yaml-merge-${{ matrix.os }}-${{ matrix.arch }}
          path: yaml-merge-${{ matrix.os }}-${{ matrix.arch }}*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          configuration: |
            {
              "categories": [
                {
                  "title": "## üöÄ Features",
                  "labels": ["enhancement", "feature"]
                },
                {
                  "title": "## üêõ Bug Fixes",
                  "labels": ["bug", "fix"]
                },
                {
                  "title": "## üìö Documentation",
                  "labels": ["documentation"]
                },
                {
                  "title": "## üî® Dependencies",
                  "labels": ["dependencies"]
                },
                {
                  "title": "## üß™ Tests",
                  "labels": ["test"]
                }
              ],
              "template": "#{{CHANGELOG}}#\n\n<details>\n<summary>üîç Uncategorized</summary>\n\n#{{UNCATEGORIZED}}#\n</details>",
              "pr_template": "- #{{TITLE}}# (#{{NUMBER}}#)",
              "empty_template": "- No changes in this release ü§∑",
              "label_extractor": [
                {
                  "pattern": "^feat.*",
                  "target": "enhancement"
                },
                {
                  "pattern": "^fix.*",
                  "target": "bug"
                },
                {
                  "pattern": "^docs.*",
                  "target": "documentation"
                },
                {
                  "pattern": "^deps.*",
                  "target": "dependencies"
                }
              ],
              "base_branches": ["main"],
              "sort": "ASC",
              "max_tags_to_fetch": 200,
              "max_pull_requests": 200,
              "max_back_track_time_days": 90
            }

      - name: Create Version Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          files: |
            yaml-merge-*/*

      - name: Update Latest Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: "Latest"
          tag_name: "latest"
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          files: |
            yaml-merge-*/*
          update_existing: true

  # Cleanup old artifacts
  cleanup:
    name: Cleanup Artifacts
    needs: release
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            yaml-merge-*
            coverage

  pr-automation:
    name: Pull Request Automation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create PR for feature branches
        if: startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/fix/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract branch name
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          
          # Create PR title from branch name
          PR_TITLE=$(echo $BRANCH_NAME | sed 's/feature\//feat: /;s/fix\//fix: /')
          
          # Check if PR already exists
          PR_EXISTS=$(gh pr list --head $BRANCH_NAME --json number -q '.[0].number')
          
          if [ -z "$PR_EXISTS" ]; then
            # Create new PR
            gh pr create \
              --title "$PR_TITLE" \
              --body-file .github/pull_request_template.md \
              --base main \
              --label "automated-pr"
          else
            # Update existing PR
            gh pr edit $PR_EXISTS \
              --title "$PR_TITLE" \
              --body-file .github/pull_request_template.md
          fi

      - name: Auto-label PRs
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const branchName = pr.head.ref;
            
            // Add labels based on branch prefix
            if (branchName.startsWith('feature/')) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['enhancement']
              });
            } else if (branchName.startsWith('fix/')) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['bug']
              });
            }
